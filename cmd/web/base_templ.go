// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.648
package web

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Base() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><title>Go Blueprint Hello</title><script src=\"/js/htmx.min.js\"></script></head><body><main id=\"main\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</main></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Navbar(themes []string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<nav><div class=\"navbar bg-base-100 max-w-5xl mx-auto\"><div class=\"navbar-start\"><div class=\"dropdown rounded-md\"><div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost lg:hidden\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h8m-8 6h16\"></path></svg></div><ul tabindex=\"0\" class=\"menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52\"><li><a>new chat</a></li><li><a>dir</a><ul class=\"p-2\"><li><a>about plugtalk</a></li><li><a>github docs</a></li></ul></li><li><a>home</a></li></ul></div><a class=\"btn btn-ghost text-xl p-2 rounded-md\">ðŸ”ŒðŸ—£ plugtalk  </a></div><div class=\"navbar-center hidden lg:flex\"><ul class=\"menu menu-horizontal px-1 rounded-md\"><li><a href=\"/chat\">new chat</a></li><li><details><summary>dir</summary><ul class=\"p-2\"><li><a>about plugtalk</a></li><li><a>github docs</a></li></ul></details></li><li><a>home</a></li></ul></div><div class=\"navbar-end\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Select(themes).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Select(options []string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<select class=\"select select-sm select-bordered w-full max-w-40 rounded-md\" id=\"theme-select\"><option disabled>pick a theme</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, option := range options {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(option)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/base.templ`, Line: 67, Col: 22}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(option)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/web/base.templ`, Line: 67, Col: 33}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Chat(themes []string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>PlugTalk | Chat</title><link href=\"/css/output.css\" rel=\"stylesheet\"><meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1, maximum-scale=1, user-scalable=no\"><meta http-equiv=\"Cache-Control\" content=\"no-cache, no-store, must-revalidate\"><meta http-equiv=\"Pragma\" content=\"no-cache\"><meta name=\"htmx-config\" content=\"{&#34;useTemplateFragments&#34;: true}\"><meta http-equiv=\"Expires\" content=\"0\"><link href=\"https://unpkg.com/sanitize.css\" rel=\"stylesheet\"><link href=\"https://unpkg.com/sanitize.css/typography.css\" rel=\"stylesheet\"><link href=\"https://unpkg.com/sanitize.css/forms.css\" rel=\"stylesheet\"><script type=\"module\" src=\"/js/htmx.min.js\"></script><script type=\"module\" src=\"/js/theme.min.js\"></script><script defer>\n        htmx.on(\"htmx:load\", function (evt) {\n            var eleID = evt.detail.elt.parentElement.attributes[\"id\"]\n            if (eleID != undefined && eleID.value == \"message-table-tbody\") {\n                // New message has arrived in chat\n\n                // Focus input when message arrives\n                document.getElementById(\"message-input\").focus()\n\n                // Convert UTC datetime from server into local timestamp\n                var ts = evt.detail.elt.cells[0]\n                if (ts.textContent == \"\") {\n                    // No timestamp provided, skip\n                    return\n                }\n                var d = new Date(ts.textContent)\n                ts.innerHTML = d.toLocaleTimeString()\n            }\n        });\n    </script></head><body hx-ws=\"connect:/websocket/connect\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Navbar(themes).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<h3 class=\"text-xl font-bold\">Your IP</h3><h2 id=\"ip-addr\"></h2><div class=\"flex flex-col justify-center items-center\"><div id=\"mx-auto w-full\"><h3 id=\"users\" class=\"text-xl font-bold\">Users</h3></div><div id=\"users-list\"></div></div><div class=\"max-w-5xl mx-auto py-12\" id=\"messages\"><div class=\"chat chat-start\"><div id=\"non-author-chat\"></div></div><div class=\"chat chat-start\"><div id=\"author-chat\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Input().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></body><script>\n        const tailwindColors = [\n  'bg-red-500', 'bg-blue-500', 'bg-green-500', 'bg-yellow-500',\n  'bg-purple-500', 'bg-pink-500', 'bg-indigo-500', 'bg-gray-500',\n  'text-red-500', 'text-blue-500', 'text-green-500', 'text-yellow-500',\n  'text-purple-500', 'text-pink-500', 'text-indigo-500', 'text-gray-500'\n];\n\n// Function to get a random color class\nfunction getRandomColorClass() {\n  const index = Math.floor(Math.random() * tailwindColors.length);\n  return tailwindColors[index];\n}\n\n// Apply a random color class to an element\nfunction applyRandomColor() {\n  const element = document.getElementById('nickname');\n  const colorClass = getRandomColorClass();\n  element.className = colorClass;\n}\n\n// Call the function on window load\nwindow.onload = applyRandomColor;\n</script></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Input() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<form class=\"max-w-full flex flex-row gap-2\" hx-ws=\"send\" autocomplete=\"off\"><label class=\"form-control w-full\"><div class=\"label\"><span class=\"label-text\">Enter your message here</span></div><input type=\"text\" placeholder=\"Type here\" name=\"message\" id=\"message-input\" class=\"input input-bordered w-full\"></label> <button class=\"btn btn-block max-w-20 self-end\" value=\"Send\" id=\"sent-btn\" type=\"submit\">Send</button></form>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func About(themes []string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>PlugTalk | About</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link href=\"/css/output.css\" rel=\"stylesheet\"><script type=\"module\" src=\"/js/theme.min.js\"></script></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Navbar(themes).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"prose max-w-2xl mx-auto my-16\"><h1>About PlugTalk</h1><h2>What is it?</h2><p>PlugTalk is chat platform to talk to people nearby.</p><p>Anyone with the same IP address is in the same chat room. For example, everyone in your house will get the same chat room if they visit PlugTalk. If you go to your local coffee shop, everyone who visits PlugTalk will be in the same chat room. This extends to larger organizations like college/university campuses.</p><p>Depending on how the network is set up, all mobile devices using data with the same network provider as you may be chatting together. Or similarly, all the other homes using the same ISP. This is the minority of cases however.</p><h2>Why is it?</h2><p>For fun, mostly. I wanted to make a chat application and I wanted to use <a href=\"https://htmx.org/\">htmx</a>, and this seemed like a fun idea.</p><p>There are many reasons why PlugTalk isn't useful, and talking to your fellow humans face to face is much better. However there are a few times when having a local chatroom is useful, like for discussing (or dragging) a presentation going on. At the end of the day, I'm happy to have made something.</p><h2>How do I change my nickname?</h2><p>Send this special message: <code>/nick my-new-nickname</code><br>It will go away when you reload the page.</p><h2>Source code? Self hosting?</h2><p>Of course! PlugTalk is licensed under the <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">AGPLv3</a>, and source code is available <a href=\"https://github.com/Nyumat/plugtalk\">on GitHub</a>.</p><p>You're welcome to host your own version, as long as you comply with the license by publishing your source code. Feel free to report bugs and submit PRs as well!</p><h2>Contact</h2><p>You can email me about PlugTalk at: nyumat 18 (at) gmail (dot) com</p><p>I'd be happy to hear about any fun stories.</p></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
